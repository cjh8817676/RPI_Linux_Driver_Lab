#include <linux/module.h>
#include <linux/gpio.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/of.h>
#include <linux/of_gpio.h>
#include <linux/platform_device.h>

#define DEVICE_NAME "gpio_driver"
#define GPIO_PIN 17

static int major_number;
static struct gpio_desc *gpio_desc;
static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_write(struct file *, const char __user *, size_t, loff_t *);

static struct file_operations fops = {
    .open = device_open,
    .release = device_release,
    .write = device_write,
};

static int __init gpio_driver_init(void) {
    int result;

    printk(KERN_INFO "GPIO_DRIVER: Initializing the GPIO driver\n");

    // Request GPIO
    gpio_desc = gpio_to_desc(GPIO_PIN);
    if (!gpio_desc) {
        printk(KERN_INFO "GPIO_DRIVER: invalid GPIO %d\n", GPIO_PIN);
        return -ENODEV;
    }
    printk(KERN_INFO "GPIO_DRIVER: GPIO %d is valid\n", GPIO_PIN);

    result = gpiod_direction_output(gpio_desc, 0);
    if (result) {
        printk(KERN_INFO "GPIO_DRIVER: failed to set GPIO direction\n");
        return result;
    }
    printk(KERN_INFO "GPIO_DRIVER: GPIO direction set to output\n");

    result = gpiod_export(gpio_desc, false);
    if (result) {
        printk(KERN_INFO "GPIO_DRIVER: failed to export GPIO\n");
        return result;
    }
    printk(KERN_INFO "GPIO_DRIVER: GPIO exported\n");

    // Register the character device
    major_number = register_chrdev(0, DEVICE_NAME, &fops);
    if (major_number < 0) {
        printk(KERN_ALERT "GPIO_DRIVER: failed to register a major number\n");
        return major_number;
    }
    printk(KERN_INFO "GPIO_DRIVER: registered correctly with major number %d\n", major_number);

    return 0;
}

static void __exit gpio_driver_exit(void) {
    printk(KERN_INFO "GPIO_DRIVER: Exiting the GPIO driver\n");
    gpiod_unexport(gpio_desc);
    unregister_chrdev(major_number, DEVICE_NAME);
    printk(KERN_INFO "GPIO_DRIVER: Goodbye from the LKM!\n");
}

static int device_open(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "GPIO_DRIVER: Device has been opened\n");
    return 0;
}

static int device_release(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "GPIO_DRIVER: Device successfully closed\n");
    return 0;
}

static ssize_t device_write(struct file *filep, const char __user *buffer, size_t len, loff_t *offset) {
    char buf;
    if (copy_from_user(&buf, buffer, 1)) {
        return -EFAULT;
    }
    printk(KERN_INFO "GPIO_DRIVER: Received write: %c\n", buf);

    if (buf == '1') {
        gpiod_set_value(gpio_desc, 1);
        printk(KERN_INFO "GPIO_DRIVER: GPIO set to high\n");
    } else if (buf == '0') {
        gpiod_set_value(gpio_desc, 0);
        printk(KERN_INFO "GPIO_DRIVER: GPIO set to low\n");
    } else {
        printk(KERN_INFO "GPIO_DRIVER: Invalid value\n");
        return -EINVAL;
    }
    return len;
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("A simple Linux char driver for GPIO control");
MODULE_VERSION("0.1");

module_init(gpio_driver_init);
module_exit(gpio_driver_exit);
